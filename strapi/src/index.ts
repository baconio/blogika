import type { Core } from '@strapi/strapi';

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ä–æ–ª–µ–π –¥–ª—è –±–ª–æ–≥–∞
 * @param strapi - —ç–∫–∑–µ–º–ø–ª—è—Ä Strapi
 */
const createCustomRoles = async (strapi: Core.Strapi) => {
  const roleService = strapi.service('plugin::users-permissions.role');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —É–∂–µ —Ä–æ–ª–∏
    const existingRoles = await roleService.find();
    const roleNames = existingRoles.map((role: any) => role.name);
    
    // –°–æ–∑–¥–∞–µ–º —Ä–æ–ª—å Author –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!roleNames.includes('author')) {
      await roleService.create({
        name: 'author',
        description: '–†–æ–ª—å –¥–ª—è –∞–≤—Ç–æ—Ä–æ–≤ —Å—Ç–∞—Ç–µ–π - —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º',
        type: 'author',
        permissions: {
          // –ü—Ä–∞–≤–∞ –Ω–∞ —Å—Ç–∞—Ç—å–∏
          'api::article.article': ['find', 'findOne', 'create', 'update'],
          // –ü—Ä–∞–≤–∞ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (—Ç–æ–ª—å–∫–æ —Å–≤–æ–∏)
          'api::comment.comment': ['find', 'findOne'],
          // –ü—Ä–∞–≤–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (—Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)
          'api::subscription.subscription': ['find', 'findOne'],
          // –ü—Ä–∞–≤–∞ –Ω–∞ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∞–≤—Ç–æ—Ä–∞
          'api::author.author': ['find', 'findOne', 'update'],
          // –ü—Ä–∞–≤–∞ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–µ–≥–∏ (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ)
          'api::category.category': ['find', 'findOne'],
          'api::tag.tag': ['find', 'findOne']
        }
      });
      strapi.log.info('‚úÖ Role "author" created successfully');
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ä–æ–ª—å Subscriber –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç  
    if (!roleNames.includes('subscriber')) {
      await roleService.create({
        name: 'subscriber',
        description: '–†–æ–ª—å –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ - —á—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏',
        type: 'subscriber',
        permissions: {
          // –ü—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ —Å—Ç–∞—Ç–µ–π
          'api::article.article': ['find', 'findOne'],
          // –ü—Ä–∞–≤–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
          'api::comment.comment': ['find', 'findOne', 'create', 'update'],
          // –ü—Ä–∞–≤–∞ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤–æ–∏–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
          'api::subscription.subscription': ['find', 'findOne', 'create', 'update'],
          // –ü—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ç–µ–≥–æ–≤
          'api::category.category': ['find', 'findOne'],
          'api::tag.tag': ['find', 'findOne'],
          // –ü—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –∞–≤—Ç–æ—Ä–æ–≤
          'api::author.author': ['find', 'findOne']
        }
      });
      strapi.log.info('‚úÖ Role "subscriber" created successfully');
    }
    
  } catch (error) {
    strapi.log.error('‚ùå Error creating custom roles:', error);
  }
};

export default {
  /**
   * An asynchronous register function that runs before
   * your application is initialized.
   *
   * This gives you an opportunity to extend code.
   */
  register(/* { strapi }: { strapi: Core.Strapi } */) {},

  /**
   * An asynchronous bootstrap function that runs before
   * your application gets started.
   *
   * This gives you an opportunity to set up your data model,
   * run jobs, or perform some special logic.
   */
  async bootstrap({ strapi }: { strapi: Core.Strapi }) {
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ä–æ–ª–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    await createCustomRoles(strapi);
    
    strapi.log.info('üöÄ Blog platform bootstrap completed');
  },
};
