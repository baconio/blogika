'use client';

import { createContext, useContext, useEffect, useState } from 'react';

/**
 * –¢–∏–ø—ã –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Ç–µ–º
 */
type Theme = 'light' | 'dark' | 'system';

interface ThemeContextType {
  readonly theme: Theme;
  readonly effectiveTheme: 'light' | 'dark';
  readonly setTheme: (theme: Theme) => void;
  readonly toggleTheme: () => void;
}

interface ThemeProviderProps {
  readonly children: React.ReactNode;
  readonly defaultTheme?: Theme;
  readonly storageKey?: string;
}

/**
 * –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º–∞–º–∏
 */
const ThemeContext = createContext<ThemeContextType | undefined>(undefined);

/**
 * –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ç–µ–º
 * @returns –∫–æ–Ω—Ç–µ–∫—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º–∞–º–∏
 */
export const useTheme = (): ThemeContextType => {
  const context = useContext(ThemeContext);
  if (!context) {
    throw new Error('useTheme –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ ThemeProvider');
  }
  return context;
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—É—é —Ç–µ–º—É
 * @returns 'dark' –∏–ª–∏ 'light' –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
 */
const getSystemTheme = (): 'light' | 'dark' => {
  if (typeof window === 'undefined') return 'light';
  
  return window.matchMedia('(prefers-color-scheme: dark)').matches 
    ? 'dark' 
    : 'light';
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é —Ç–µ–º—É (—Ä–∞–∑—Ä–µ—à–∞–µ—Ç 'system' –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–µ–º—É)
 * @param theme - –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–µ–º–∞
 * @returns 'light' –∏–ª–∏ 'dark'
 */
const getEffectiveTheme = (theme: Theme): 'light' | 'dark' => {
  if (theme === 'system') {
    return getSystemTheme();
  }
  return theme;
};

/**
 * –ü—Ä–æ–≤–∞–π–¥–µ—Ä —Ç–µ–º –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤–µ—Ç–ª–æ–π/—Ç–µ–º–Ω–æ–π —Ç–µ–º–æ–π
 * @param children - –¥–æ—á–µ—Ä–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
 * @param defaultTheme - —Ç–µ–º–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 * @param storageKey - –∫–ª—é—á –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–º—ã –≤ localStorage
 * @returns JSX —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
 */
export const ThemeProvider = ({
  children,
  defaultTheme = 'system',
  storageKey = 'blog-theme'
}: ThemeProviderProps) => {
  const [theme, setThemeState] = useState<Theme>(defaultTheme);
  const [effectiveTheme, setEffectiveTheme] = useState<'light' | 'dark'>('light');
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–º—ã –∏–∑ localStorage
  useEffect(() => {
    const savedTheme = localStorage.getItem(storageKey) as Theme;
    if (savedTheme && ['light', 'dark', 'system'].includes(savedTheme)) {
      setThemeState(savedTheme);
    }
  }, [storageKey]);
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ç–µ–º—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–º—ã –∏–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
  useEffect(() => {
    const updateEffectiveTheme = () => {
      const newEffectiveTheme = getEffectiveTheme(theme);
      setEffectiveTheme(newEffectiveTheme);
      
      // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É
      const root = document.documentElement;
      root.classList.remove('light', 'dark');
      root.classList.add(newEffectiveTheme);
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ theme-color –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
      const themeColorMeta = document.querySelector('meta[name="theme-color"]');
      if (themeColorMeta) {
        themeColorMeta.setAttribute(
          'content', 
          newEffectiveTheme === 'dark' ? '#1f2937' : '#ffffff'
        );
      }
    };
    
    updateEffectiveTheme();
    
    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
    if (theme === 'system') {
      const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
      const handleChange = () => updateEffectiveTheme();
      
      mediaQuery.addEventListener('change', handleChange);
      return () => mediaQuery.removeEventListener('change', handleChange);
    }
  }, [theme]);
  
  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—É—é —Ç–µ–º—É
   * @param newTheme - –Ω–æ–≤–∞—è —Ç–µ–º–∞
   */
  const setTheme = (newTheme: Theme) => {
    setThemeState(newTheme);
    localStorage.setItem(storageKey, newTheme);
  };
  
  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –º–µ–∂–¥—É —Å–≤–µ—Ç–ª–æ–π –∏ —Ç–µ–º–Ω–æ–π —Ç–µ–º–æ–π
   */
  const toggleTheme = () => {
    const currentEffective = getEffectiveTheme(theme);
    const newTheme = currentEffective === 'light' ? 'dark' : 'light';
    setTheme(newTheme);
  };
  
  const value: ThemeContextType = {
    theme,
    effectiveTheme,
    setTheme,
    toggleTheme
  };
  
  return (
    <ThemeContext.Provider value={value}>
      {children}
    </ThemeContext.Provider>
  );
};

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è —Ç–µ–º
 */
export const ThemeToggle = () => {
  const { theme, effectiveTheme, setTheme } = useTheme();
  
  const themeOptions = [
    { value: 'light' as const, label: '–°–≤–µ—Ç–ª–∞—è', icon: '‚òÄÔ∏è' },
    { value: 'dark' as const, label: '–¢–µ–º–Ω–∞—è', icon: 'üåô' },
    { value: 'system' as const, label: '–°–∏—Å—Ç–µ–º–Ω–∞—è', icon: 'üíª' }
  ];
  
  return (
    <div className="flex items-center gap-1 p-1 bg-gray-100 dark:bg-gray-800 rounded-lg">
      {themeOptions.map((option) => (
        <button
          key={option.value}
          onClick={() => setTheme(option.value)}
          className={`flex items-center gap-2 px-3 py-2 text-sm font-medium rounded-md transition-colors ${
            theme === option.value
              ? 'bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 shadow-sm'
              : 'text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100'
          }`}
          aria-label={`–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ ${option.label.toLowerCase()} —Ç–µ–º—É`}
        >
          <span>{option.icon}</span>
          <span className="hidden sm:inline">{option.label}</span>
        </button>
      ))}
    </div>
  );
};

/**
 * –ü—Ä–æ—Å—Ç–∞—è –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
 */
export const SimpleThemeToggle = () => {
  const { effectiveTheme, toggleTheme } = useTheme();
  
  return (
    <button
      onClick={toggleTheme}
      className="p-2 text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 transition-colors"
      aria-label="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É"
    >
      {effectiveTheme === 'light' ? 'üåô' : '‚òÄÔ∏è'}
    </button>
  );
}; 