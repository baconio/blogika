'use client';

import { useState } from 'react';
import { Button } from '@/components/ui/Button';
import { Avatar } from '@/components/ui/Avatar';

/**
 * –ü—Ä–æ–ø—Å—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Ñ–æ—Ä–º—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
 */
interface CommentFormProps {
  readonly currentUser?: {
    id: string;
    name: string;
    avatar?: string;
  };
  readonly parentId?: string;
  readonly placeholder?: string;
  readonly submitText?: string;
  readonly onSubmit: (content: string, parentId?: string) => Promise<void>;
  readonly onCancel?: () => void;
  readonly isLoading?: boolean;
  readonly maxLength?: number;
}

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ñ–æ—Ä–º—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é
 * @param currentUser - –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param parentId - ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
 * @param placeholder - –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
 * @param submitText - —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
 * @param onSubmit - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
 * @param onCancel - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã (–¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤)
 * @param isLoading - —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
 * @param maxLength - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
 * @returns JSX —ç–ª–µ–º–µ–Ω—Ç —Ñ–æ—Ä–º—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
 */
export const CommentForm = ({
  currentUser,
  parentId,
  placeholder = '–ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...',
  submitText = '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å',
  onSubmit,
  onCancel,
  isLoading = false,
  maxLength = 1000
}: CommentFormProps) => {
  const [content, setContent] = useState('');
  const [isFocused, setIsFocused] = useState(false);
  const [error, setError] = useState('');

  const isReply = Boolean(parentId);
  const remainingChars = maxLength - content.length;
  const isValid = content.trim().length > 0 && content.length <= maxLength;

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!isValid) {
      setError('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      return;
    }

    if (!currentUser) {
      setError('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }

    try {
      setError('');
      await onSubmit(content.trim(), parentId);
      setContent('');
      setIsFocused(false);
      onCancel?.(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –æ—Ç–≤–µ—Ç–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  };

  const handleCancel = () => {
    setContent('');
    setIsFocused(false);
    setError('');
    onCancel?.();
  };

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
  if (!currentUser) {
    return (
      <div className="p-4 bg-gray-50 rounded-lg text-center">
        <p className="text-gray-600 mb-3">
          –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        </p>
        <Button variant="primary">
          –í–æ–π—Ç–∏
        </Button>
      </div>
    );
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-3">
      {isReply && (
        <div className="text-sm text-gray-600 bg-blue-50 p-2 rounded">
          üí¨ –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        </div>
      )}

      <div className="flex gap-3">
        {/* –ê–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
        <div className="flex-shrink-0">
          <Avatar
            src={currentUser.avatar}
            alt={currentUser.name}
            size="sm"
          />
        </div>

        {/* –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ */}
        <div className="flex-grow">
          <textarea
            value={content}
            onChange={(e) => setContent(e.target.value)}
            onFocus={() => setIsFocused(true)}
            placeholder={placeholder}
            maxLength={maxLength}
            rows={isFocused ? 4 : 2}
            className={`w-full px-3 py-2 border rounded-lg resize-none transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
              error ? 'border-red-300' : 'border-gray-300'
            }`}
            disabled={isLoading}
          />

          {/* –°—á–µ—Ç—á–∏–∫ —Å–∏–º–≤–æ–ª–æ–≤ */}
          {isFocused && (
            <div className="flex justify-between items-center mt-2 text-xs">
              <span className={remainingChars < 0 ? 'text-red-500' : 'text-gray-500'}>
                {remainingChars} —Å–∏–º–≤–æ–ª–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å
              </span>
              
              {error && (
                <span className="text-red-500">{error}</span>
              )}
            </div>
          )}

          {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
          {isFocused && (
            <div className="flex justify-end gap-2 mt-3">
              {(isReply || content.trim()) && (
                <Button
                  type="button"
                  variant="outline"
                  size="sm"
                  onClick={handleCancel}
                  disabled={isLoading}
                >
                  –û—Ç–º–µ–Ω–∞
                </Button>
              )}
              
              <Button
                type="submit"
                variant="primary"
                size="sm"
                disabled={!isValid || isLoading}
                className="min-w-[100px]"
              >
                {isLoading ? (
                  <div className="flex items-center gap-2">
                    <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
                    <span>–û—Ç–ø—Ä–∞–≤–∫–∞...</span>
                  </div>
                ) : (
                  submitText
                )}
              </Button>
            </div>
          )}
        </div>
      </div>
    </form>
  );
}; 