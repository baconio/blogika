'use client';

import { useState } from 'react';
import { Button } from '@/components/ui/Button';
import { Modal } from '@/components/ui/Modal';
import { Comment } from '@/types/Comment';

/**
 * –ü—Ä–æ–ø—Å—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
 */
interface CommentModerationToolsProps {
  readonly comments: Comment[];
  readonly selectedComments: string[];
  readonly onSelectComment: (commentId: string) => void;
  readonly onSelectAll: () => void;
  readonly onDeselectAll: () => void;
  readonly onBulkModerate: (commentIds: string[], action: 'approve' | 'reject' | 'delete') => Promise<void>;
  readonly onPinComment?: (commentId: string) => Promise<void>;
  readonly onUnpinComment?: (commentId: string) => Promise<void>;
  readonly isLoading?: boolean;
}

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –º–∞—Å—Å–æ–≤–æ
 * @param comments - —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
 * @param selectedComments - ID –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
 * @param onSelectComment - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
 * @param onSelectAll - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
 * @param onDeselectAll - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–Ω—è—Ç–∏—è –≤—ã–±–æ—Ä–∞
 * @param onBulkModerate - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Å—Å–æ–≤–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏
 * @param onPinComment - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
 * @param onUnpinComment - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
 * @param isLoading - —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
 * @returns JSX —ç–ª–µ–º–µ–Ω—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
 */
export const CommentModerationTools = ({
  comments,
  selectedComments,
  onSelectComment,
  onSelectAll,
  onDeselectAll,
  onBulkModerate,
  onPinComment,
  onUnpinComment,
  isLoading = false
}: CommentModerationToolsProps) => {
  const [showConfirmModal, setShowConfirmModal] = useState(false);
  const [pendingAction, setPendingAction] = useState<{
    action: 'approve' | 'reject' | 'delete';
    commentIds: string[];
  } | null>(null);

  const selectedCount = selectedComments.length;
  const allSelected = selectedCount === comments.length && comments.length > 0;
  
  const pendingComments = comments.filter(c => c.moderationStatus === 'pending');
  const approvedComments = comments.filter(c => c.moderationStatus === 'approved');
  const rejectedComments = comments.filter(c => c.moderationStatus === 'rejected');

  const handleBulkAction = (action: 'approve' | 'reject' | 'delete') => {
    if (selectedCount === 0) return;
    
    setPendingAction({ action, commentIds: selectedComments });
    setShowConfirmModal(true);
  };

  const confirmBulkAction = async () => {
    if (!pendingAction) return;
    
    try {
      await onBulkModerate(pendingAction.commentIds, pendingAction.action);
      onDeselectAll();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:', error);
    } finally {
      setShowConfirmModal(false);
      setPendingAction(null);
    }
  };

  const getActionText = (action: string) => {
    switch (action) {
      case 'approve': return '–æ–¥–æ–±—Ä–∏—Ç—å';
      case 'reject': return '–æ—Ç–∫–ª–æ–Ω–∏—Ç—å';
      case 'delete': return '—É–¥–∞–ª–∏—Ç—å';
      default: return '–æ–±—Ä–∞–±–æ—Ç–∞—Ç—å';
    }
  };

  const getActionColor = (action: string) => {
    switch (action) {
      case 'approve': return 'text-green-600 border-green-600 hover:bg-green-50';
      case 'reject': return 'text-yellow-600 border-yellow-600 hover:bg-yellow-50';
      case 'delete': return 'text-red-600 border-red-600 hover:bg-red-50';
      default: return 'text-gray-600 border-gray-600 hover:bg-gray-50';
    }
  };

  return (
    <>
      <div className="bg-white border rounded-lg p-4 mb-6">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-lg font-semibold text-gray-900">
            –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
          </h3>
          
          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
          <div className="flex items-center gap-4 text-sm">
            <span className="text-yellow-600">
              –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {pendingComments.length}
            </span>
            <span className="text-green-600">
              –û–¥–æ–±—Ä–µ–Ω–æ: {approvedComments.length}
            </span>
            <span className="text-red-600">
              –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {rejectedComments.length}
            </span>
          </div>
        </div>

        {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–æ–º */}
        <div className="flex items-center gap-4 mb-4">
          <div className="flex items-center gap-2">
            <input
              type="checkbox"
              checked={allSelected}
              onChange={allSelected ? onDeselectAll : onSelectAll}
              className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
            />
            <span className="text-sm text-gray-600">
              {selectedCount > 0 
                ? `–í—ã–±—Ä–∞–Ω–æ: ${selectedCount}` 
                : '–í—ã–±—Ä–∞—Ç—å –≤—Å–µ'
              }
            </span>
          </div>

          {selectedCount > 0 && (
            <Button
              variant="outline"
              size="sm"
              onClick={onDeselectAll}
            >
              –°–±—Ä–æ—Å–∏—Ç—å –≤—ã–±–æ—Ä
            </Button>
          )}
        </div>

        {/* –ú–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
        {selectedCount > 0 && (
          <div className="flex items-center gap-2 p-3 bg-gray-50 rounded-lg">
            <span className="text-sm text-gray-600 mr-2">
              –î–µ–π—Å—Ç–≤–∏—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏:
            </span>
            
            <Button
              variant="outline"
              size="sm"
              onClick={() => handleBulkAction('approve')}
              disabled={isLoading}
              className={getActionColor('approve')}
            >
              ‚úì –û–¥–æ–±—Ä–∏—Ç—å ({selectedCount})
            </Button>
            
            <Button
              variant="outline"
              size="sm"
              onClick={() => handleBulkAction('reject')}
              disabled={isLoading}
              className={getActionColor('reject')}
            >
              ‚ö† –û—Ç–∫–ª–æ–Ω–∏—Ç—å ({selectedCount})
            </Button>
            
            <Button
              variant="outline"
              size="sm"
              onClick={() => handleBulkAction('delete')}
              disabled={isLoading}
              className={getActionColor('delete')}
            >
              üóë –£–¥–∞–ª–∏—Ç—å ({selectedCount})
            </Button>
          </div>
        )}

        {/* –ë—ã—Å—Ç—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã */}
        <div className="mt-4 pt-4 border-t border-gray-200">
          <div className="flex items-center gap-2">
            <span className="text-sm text-gray-600">–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</span>
            
            <Button
              variant="outline"
              size="sm"
              onClick={() => {
                const pendingIds = pendingComments.map(c => c.id);
                onBulkModerate(pendingIds, 'approve');
              }}
              disabled={pendingComments.length === 0 || isLoading}
              className="text-green-600 border-green-600 hover:bg-green-50"
            >
              –û–¥–æ–±—Ä–∏—Ç—å –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ ({pendingComments.length})
            </Button>
            
            <Button
              variant="outline"
              size="sm"
              onClick={() => {
                const rejectedIds = rejectedComments.map(c => c.id);
                onBulkModerate(rejectedIds, 'delete');
              }}
              disabled={rejectedComments.length === 0 || isLoading}
              className="text-red-600 border-red-600 hover:bg-red-50"
            >
              –£–¥–∞–ª–∏—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ ({rejectedComments.length})
            </Button>
          </div>
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è */}
      <Modal
        isOpen={showConfirmModal}
        onClose={() => setShowConfirmModal(false)}
        title="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è"
      >
        <div className="space-y-4">
          <p className="text-gray-700">
            –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ{' '}
            <strong>
              {pendingAction && getActionText(pendingAction.action)}
            </strong>{' '}
            {pendingAction?.commentIds.length} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤?
          </p>
          
          <div className="flex justify-end gap-3">
            <Button
              variant="outline"
              onClick={() => setShowConfirmModal(false)}
            >
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button
              variant="primary"
              onClick={confirmBulkAction}
              disabled={isLoading}
              className={pendingAction?.action === 'delete' ? 'bg-red-600 hover:bg-red-700' : ''}
            >
              {isLoading ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'}
            </Button>
          </div>
        </div>
      </Modal>
    </>
  );
}; 